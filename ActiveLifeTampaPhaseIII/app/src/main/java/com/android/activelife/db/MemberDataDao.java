package com.android.activelife.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_DATA".
*/
public class MemberDataDao extends AbstractDao<MemberData, String> {

    public static final String TABLENAME = "MEMBER_DATA";

    /**
     * Properties of entity MemberData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Member_id = new Property(0, String.class, "member_id", true, "MEMBER_ID");
        public final static Property Member_name = new Property(1, String.class, "member_name", false, "MEMBER_NAME");
    }


    public MemberDataDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_DATA\" (" + //
                "\"MEMBER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: member_id
                "\"MEMBER_NAME\" TEXT);"); // 1: member_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberData entity) {
        stmt.clearBindings();
 
        String member_id = entity.getMember_id();
        if (member_id != null) {
            stmt.bindString(1, member_id);
        }
 
        String member_name = entity.getMember_name();
        if (member_name != null) {
            stmt.bindString(2, member_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberData entity) {
        stmt.clearBindings();
 
        String member_id = entity.getMember_id();
        if (member_id != null) {
            stmt.bindString(1, member_id);
        }
 
        String member_name = entity.getMember_name();
        if (member_name != null) {
            stmt.bindString(2, member_name);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MemberData readEntity(Cursor cursor, int offset) {
        MemberData entity = new MemberData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // member_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // member_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberData entity, int offset) {
        entity.setMember_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMember_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MemberData entity, long rowId) {
        return entity.getMember_id();
    }
    
    @Override
    public String getKey(MemberData entity) {
        if(entity != null) {
            return entity.getMember_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberData entity) {
        return entity.getMember_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

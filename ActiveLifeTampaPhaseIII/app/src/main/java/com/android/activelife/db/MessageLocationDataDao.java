package com.android.activelife.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_LOCATION_DATA".
*/
public class MessageLocationDataDao extends AbstractDao<MessageLocationData, Long> {

    public static final String TABLENAME = "MESSAGE_LOCATION_DATA";

    /**
     * Properties of entity MessageLocationData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message_id = new Property(1, String.class, "message_id", false, "MESSAGE_ID");
        public final static Property Message_title = new Property(2, String.class, "message_title", false, "MESSAGE_TITLE");
        public final static Property Message_msg = new Property(3, String.class, "message_msg", false, "MESSAGE_MSG");
        public final static Property Message_send_at = new Property(4, String.class, "message_send_at", false, "MESSAGE_SEND_AT");
        public final static Property Location_id = new Property(5, String.class, "location_id", false, "LOCATION_ID");
        public final static Property Location_name = new Property(6, String.class, "location_name", false, "LOCATION_NAME");
        public final static Property Location_address = new Property(7, String.class, "location_address", false, "LOCATION_ADDRESS");
        public final static Property Location_city = new Property(8, String.class, "location_city", false, "LOCATION_CITY");
        public final static Property Location_state = new Property(9, String.class, "location_state", false, "LOCATION_STATE");
        public final static Property Location_zip = new Property(10, String.class, "location_zip", false, "LOCATION_ZIP");
        public final static Property Location_phone = new Property(11, String.class, "location_phone", false, "LOCATION_PHONE");
        public final static Property Location_email = new Property(12, String.class, "location_email", false, "LOCATION_EMAIL");
    }


    public MessageLocationDataDao(DaoConfig config) {
        super(config);
    }
    
    public MessageLocationDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_LOCATION_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: message_id
                "\"MESSAGE_TITLE\" TEXT," + // 2: message_title
                "\"MESSAGE_MSG\" TEXT," + // 3: message_msg
                "\"MESSAGE_SEND_AT\" TEXT," + // 4: message_send_at
                "\"LOCATION_ID\" TEXT," + // 5: location_id
                "\"LOCATION_NAME\" TEXT," + // 6: location_name
                "\"LOCATION_ADDRESS\" TEXT," + // 7: location_address
                "\"LOCATION_CITY\" TEXT," + // 8: location_city
                "\"LOCATION_STATE\" TEXT," + // 9: location_state
                "\"LOCATION_ZIP\" TEXT," + // 10: location_zip
                "\"LOCATION_PHONE\" TEXT," + // 11: location_phone
                "\"LOCATION_EMAIL\" TEXT);"); // 12: location_email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_LOCATION_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageLocationData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message_id = entity.getMessage_id();
        if (message_id != null) {
            stmt.bindString(2, message_id);
        }
 
        String message_title = entity.getMessage_title();
        if (message_title != null) {
            stmt.bindString(3, message_title);
        }
 
        String message_msg = entity.getMessage_msg();
        if (message_msg != null) {
            stmt.bindString(4, message_msg);
        }
 
        String message_send_at = entity.getMessage_send_at();
        if (message_send_at != null) {
            stmt.bindString(5, message_send_at);
        }
 
        String location_id = entity.getLocation_id();
        if (location_id != null) {
            stmt.bindString(6, location_id);
        }
 
        String location_name = entity.getLocation_name();
        if (location_name != null) {
            stmt.bindString(7, location_name);
        }
 
        String location_address = entity.getLocation_address();
        if (location_address != null) {
            stmt.bindString(8, location_address);
        }
 
        String location_city = entity.getLocation_city();
        if (location_city != null) {
            stmt.bindString(9, location_city);
        }
 
        String location_state = entity.getLocation_state();
        if (location_state != null) {
            stmt.bindString(10, location_state);
        }
 
        String location_zip = entity.getLocation_zip();
        if (location_zip != null) {
            stmt.bindString(11, location_zip);
        }
 
        String location_phone = entity.getLocation_phone();
        if (location_phone != null) {
            stmt.bindString(12, location_phone);
        }
 
        String location_email = entity.getLocation_email();
        if (location_email != null) {
            stmt.bindString(13, location_email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageLocationData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message_id = entity.getMessage_id();
        if (message_id != null) {
            stmt.bindString(2, message_id);
        }
 
        String message_title = entity.getMessage_title();
        if (message_title != null) {
            stmt.bindString(3, message_title);
        }
 
        String message_msg = entity.getMessage_msg();
        if (message_msg != null) {
            stmt.bindString(4, message_msg);
        }
 
        String message_send_at = entity.getMessage_send_at();
        if (message_send_at != null) {
            stmt.bindString(5, message_send_at);
        }
 
        String location_id = entity.getLocation_id();
        if (location_id != null) {
            stmt.bindString(6, location_id);
        }
 
        String location_name = entity.getLocation_name();
        if (location_name != null) {
            stmt.bindString(7, location_name);
        }
 
        String location_address = entity.getLocation_address();
        if (location_address != null) {
            stmt.bindString(8, location_address);
        }
 
        String location_city = entity.getLocation_city();
        if (location_city != null) {
            stmt.bindString(9, location_city);
        }
 
        String location_state = entity.getLocation_state();
        if (location_state != null) {
            stmt.bindString(10, location_state);
        }
 
        String location_zip = entity.getLocation_zip();
        if (location_zip != null) {
            stmt.bindString(11, location_zip);
        }
 
        String location_phone = entity.getLocation_phone();
        if (location_phone != null) {
            stmt.bindString(12, location_phone);
        }
 
        String location_email = entity.getLocation_email();
        if (location_email != null) {
            stmt.bindString(13, location_email);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageLocationData readEntity(Cursor cursor, int offset) {
        MessageLocationData entity = new MessageLocationData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message_msg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message_send_at
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // location_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // location_address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location_city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // location_state
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // location_zip
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // location_phone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // location_email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageLocationData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage_msg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessage_send_at(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocation_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocation_address(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocation_city(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocation_state(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLocation_zip(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocation_phone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLocation_email(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageLocationData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageLocationData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageLocationData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
